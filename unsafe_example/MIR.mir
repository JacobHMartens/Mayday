// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut COUNTER: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 0_u32;
        return;
    }
}

fn add_to_count(_1: u32) -> () {
    debug inc => _1;
    let mut _0: ();
    let mut _2: *mut u32;
    let mut _3: (u32, bool);
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;

    bb0: {
        _2 = const {alloc1: *mut u32};
        _10 = _2 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(u32);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _4 = _2 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(u32);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb2, unwind unreachable];
    }

    bb2: {
        (*_2) = move (_3.0: u32);
        return;
    }

    bb3: {
        _3 = CheckedAdd((*_2), _1);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_2), _1) -> [success: bb1, unwind continue];
    }
}

alloc1 (static: COUNTER, size: 4, align: 4) {
    00 00 00 00                                     â”‚ ....
}

fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let _2: ();
    scope 1 {
        debug x => const 10_u32;
        scope 2 {
        }
    }

    bb0: {
        _1 = const 10_u32;
        _2 = add_to_count(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
